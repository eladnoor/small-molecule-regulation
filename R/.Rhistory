tempdata = alldata[,whichdata]
highlac = which(tempdata[midx,] > 1)
lowlac = which(tempdata[midx,] < 1)
if (length(lowlac)<3|length(highlac)<3){next}
for (i in 1:dim(tempdata)[1]){
if (length(which(is.na(as.numeric(tempdata[i,]))))>0){next}
p[i,s] = wilcox.test(as.numeric(tempdata[i,highlac]),as.numeric( tempdata[i,lowlac]) )$p.value
if (is.nan(p[i,s])){next}
if (p[i,s]<0.05){fc[i,s] = mean(as.numeric(tempdata[i,highlac])) - mean(as.numeric( tempdata[i,lowlac]) )}
}
ctr = ctr + 1
}
signfc = sign(fc)
msums = rowSums(abs(signfc))
# Plot the results
notna = which(!is.na(alldata[midx,]))
plotdata = log2(alldata[which(msums>=3),notna])
sortidx = order(alldata[midx,notna])
annCol = tissuetype[notna]
aheatmap(plotdata,color = diverge_hsv(n=250,p=0.5), breaks = 0,
Rowv = NA, Colv = sortidx,annCol = annCol)
# Look for common patterns in metabolite of your choice
hotmet = 'Glucose'
midx = which(rownames(alldata) == hotmet)
s2use = c('BRCAneg','BRCApos','COAD','KIRC','PRAD','PRAD_LODA','STAD')
p = matrix(1,dim(alldata)[1],length(s2use))
fc = matrix(0,dim(alldata)[1],length(s2use))
colnames(p) = s2use;colnames(fc) = s2use
rownames(p) = rownames(alldata); rownames(fc) = rownames(alldata)
for (s in s2use){
whichdata = which(tissuetype == s)
tempdata = alldata[,whichdata]
highlac = which(tempdata[midx,] > 1)
lowlac = which(tempdata[midx,] < 1)
if (length(lowlac)<3|length(highlac)<3){next}
for (i in 1:dim(tempdata)[1]){
if (length(which(is.na(as.numeric(tempdata[i,]))))>0){next}
p[i,s] = wilcox.test(as.numeric(tempdata[i,highlac]),as.numeric( tempdata[i,lowlac]) )$p.value
if (is.nan(p[i,s])){next}
if (p[i,s]<0.05){fc[i,s] = mean(as.numeric(tempdata[i,highlac])) - mean(as.numeric( tempdata[i,lowlac]) )}
}
ctr = ctr + 1
}
signfc = sign(fc)
msums = rowSums(abs(signfc))
# Plot the results
notna = which(!is.na(alldata[midx,]))
plotdata = log2(alldata[which(msums>=3),notna])
sortidx = order(alldata[midx,notna])
annCol = tissuetype[notna]
aheatmap(plotdata,color = diverge_hsv(n=250,p=0.5), breaks = 0,
Rowv = NA, Colv = sortidx,annCol = annCol)
shiny::runApp('pancanmet/inst/shinyApp')
shiny::runApp('pancanmet/inst/shinyApp')
shiny::runApp('pancanmet/inst/shinyApp')
shiny::runApp('pancanmet/inst/shinyApp')
shiny::runApp('pancanmet/inst/shinyApp')
shiny::runApp('pancanmet/inst/shinyApp')
shinyapps::setAccountInfo(name='edreznik',
token='4CA468246EDEF0641BE5A1B7D309CFC1',
secret='<SECRET>')
shinyapps::setAccountInfo(name='edreznik', token='4CA468246EDEF0641BE5A1B7D309CFC1', secret='bUXeK2gr/X7ObI0lOFTkL+haVXTMU1rITu1XkQ7A')
library(shinyapps)
shinyapps:deployApp('/Users/ereznik/pancanmet/')
shinyapps::deployApp('/Users/ereznik/pancanmet/')
shinyapps::deployApp('/Users/ereznik/pancanmet/inst/shinyApp/')
shinyapps::deployApp('/Users/ereznik/pancanmet/inst/shinyApp/')
shinyapps::deployApp('/Users/ereznik/pancanmet/inst/shinyApp/')
shinyapps::deployApp('/Users/ereznik/pancanmet/inst/shinyApp/')
shinyapps::setAccountInfo(name='edreznik', token='4CA468246EDEF0641BE5A1B7D309CFC1', secret='bUXeK2gr/X7ObI0lOFTkL+haVXTMU1rITu1XkQ7A')
shinyapps::setAccountInfo(name='edreznik', token='4CA468246EDEF0641BE5A1B7D309CFC1', secret='bUXeK2gr/X7ObI0lOFTkL+haVXTMU1rITu1XkQ7A')
shinyapps::deployApp('/Users/ereznik/pancanmet/inst/shinyApp/')
shinyapps::deployApp('/Users/ereznik/pancanmet/inst/shinyApp/')
shinyapps::deployApp('/Users/ereznik/pancanmet/inst/shinyApp/')
shiny::runApp('kidney_metab_project/inst/shinyApp')
shiny::runApp('kidney_metab_project/inst/shinyApp')
shiny::runApp('kidney_metab_project/inst/shinyApp')
shiny::runApp('kidney_metab_project/inst/shinyApp')
shiny::runApp('kidney_metab_project/inst/shinyApp')
shiny::runApp('kidney_metab_project/inst/shinyApp')
shiny::runApp('kidney_metab_project/inst/shinyApp')
shiny::runApp('pancanmet/inst/shinyApp')
shiny::runApp('pancanmet/inst/shinyApp')
shiny::runApp('kidney_metab_project/inst/shinyApp')
# First, read every file to get the number of patients, and exclude those files which have less than 20
findir_pats = list.files('/Users/ereznik/Documents/mt/data/idxpats_mt_rna')
numpats = vector()
for (i in 1:length(findir_pats)){
temp = read.csv(paste('/Users/ereznik/Documents/mt/data/idxpats_mt_rna/',findir_pats[i],sep=''),row.names = 1)
numpats[i] = dim(temp)[1]
}
names(numpats) = findir_pats
f2keep = findir_pats[which(numpats >= 20)]
f2keep
numpats
source('~/.active-rstudio-document', echo=TRUE)
d
qplot(d[,1],d[,3])
source('~/Downloads/glutathionanalysis.R', echo=TRUE)
d
source('~/Downloads/glutathionanalysis.R', echo=TRUE)
source('~/Downloads/glutathionanalysis.R', echo=TRUE)
qplot(d[,2],d[,4])
source('~/Downloads/glutathionanalysis.R', echo=TRUE)
source('~/Downloads/glutathionanalysis.R', echo=TRUE)
update.packages(checkBuilt=TRUE)
library(ggplot2)
library(limma)
library(gskb)
source("https://bioconductor.org/biocLite.R")
remove.packages("BiocInstaller")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
debugSource('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
kruskal.test(plotdata$X0,plotdata$PlateID)
kruskal.test(plotdata$X0,plotdata$PlateID)$p.value
f
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
kw
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
which(kw[,1] < 5e-2  & kw[,2] == 'WGS')
which(kw[,1] > 5e-2  & kw[,2] == 'WGS')
which(kw[,1] > 5e-2  & kw[,2] == 'WXS')
which(kw[,1] < 5e-2  & kw[,2] == 'WXS')
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
shiny::runApp('kidney_metab_project/inst/shinyApp')
shiny::runApp('kidney_metab_project/inst/shinyApp')
shiny::runApp('kidney_metab_project/inst/shinyApp')
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
source('~/Documents/mt/analysis/removeBatch.R', echo=TRUE)
maxdiff
platecoef
names(coef)
coef
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
res
coef(mtdna)
a = 'asdfasdf'
substr(a,4,6)
names(allcoef) = unlist(lapply(names(allcoef,function(x){substr(x,3,length(x))})))
names(allcoef) = unlist(lapply(names(allcoef),function(x){substr(x,3,length(x))}))
allcoef = coef(mtdna)
names(allcoef) = unlist(lapply(names(allcoef),function(x){substr(x,3,length(x))}))
allcoef
allcoef = coef(mtdna)
allcoef
unlist(lapply(names(allcoef),function(x){substr(x,3,length(x))}))
allcoef = coef(mtdna)
a = names(allcoef)[1]
a
substr(a,3,length(a))
allcoef = coef(mtdna)
names(allcoef) = unlist(lapply(names(allcoef),function(x){substr(x,3,nchar(x))}))
allcoef
resid2 = d$X0 - allcoef[d$PlateID]
resid2
diffval2 = resid2 - d2[names(resid2),'Corrected']
diffval2
names(resid2)
allcoef[d$PlateID]
resid2 = d$X0 - allcoef[d$PlateID]
resid2
resid2 = d$X0 - allcoef[d$PlateID]
names(resid2) = rownames(d2)
diffval2 = resid2 - d2[names(resid2),'Corrected']
diffval2
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
res2
diffval2
max(abs(diffval2))
res
diffval2
t(diffval2)
data.frame(diffval2)
a=data.frame(diffval2)
which(abs(a[,1]>1e-5))
which(abs(a[,1])>1e-5)
resid2$Plate = d$PlateID
resid2 = d$X0 - allcoef[d$PlateID]
resid2$Plate = d$PlateID
resid2 = data.frame( d$X0 - allcoef[d$PlateID] )
resid2$Plate = d$PlateID
rownames(resid2) = rownames(d2)
diffval2 = resid2[,1] - d2[names(resid2),'Corrected']
rownames(resid2) = rownames(d2)
diffval2 = resid2[,1] - d2[names(resid2),'Corrected']
dim(resid2)
diffval2 = resid2[,1] - d2[rownames(resid2),'Corrected']
a = which(abs(diffval2)>1e-5)
a
resid2[a,]
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
res
res2
resid2
allcoef['WUGSC=A10B']
allcoef
allcoef = coef(mtdna)
names(allcoef) = unlist(lapply(names(allcoef),function(x){substr(x,10,nchar(x))}))
allcoef
names(allcoef) = as.character( unlist(lapply(names(allcoef),function(x){substr(x,10,nchar(x))})))
allcoef
allcoef = coef(mtdna)
names(allcoef) = unlist(lapply(names(allcoef),function(x){substr(x,10,nchar(x))}))
names(allcoef)[1]
names(allcoef)[2]
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
res2
d$PlateID
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
resid2
res2
allcoef[d$PlateID]
plate2subtract = matrix(0,dim(d)[1],1)
plate2subtract = allcoef[d$PlateID]
d$PlateID = as.character(d$PlateID)
plate2subtract = allcoef[d$PlateID]
plate2subtract[is.na(plate2subtract)] = 0
resid2 = data.frame( d$X0 - plate2subtract )
resid2
dim(d)
d$X0
resid2 = data.frame( d$X0 - plate2subtract )
resid2$Plate = d$PlateID
rownames(resid2) = rownames(d2)
diffval2 = resid2[,1] - d2[rownames(resid2),'Corrected']
diffval2
max(diffval2)
min(diffval2)
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
res2
max(res2)
max(res)
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
tiscoef
allcoef
d$PlateID
d$PlateID = as.character(d$PlateID)
plate2subtract = allcoef[d$PlateID]
plate2subtract
is.na(plate2subtract)
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
notatissue = which(is.na(d$Type))
notattissue
NAtissue = which(is.na(d$Type))
NAtissue
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
source('~/Documents/mt/checks/batch/Rversion_check_removebatch.R', echo=TRUE)
?read.csv
f1 = read.csv( '/Users/ereznik/Documents/papillary/data/WGS/maf/T6--N6.union.v5.annotated.maf',sep = '\t',header = TRUE, skip = 1)
head(f1)
f2 = read.csv( '/Users/ereznik/Documents/papillary/data/WGS/maf/284--285.union.v5.annotated.maf',sep = '\t',header = TRUE, skip = 1)
head(f2)
colnames(f2)
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
head(r1)
head(r2)
ranges <- merge(r1,r2,by="chrom",suffixes=c("r1","r2"))
ranges <- merge(r1,r2,suffixes=c("r1","r2"))
head(ranges)
source("http://bioconductor.org/biocLite.R")
biocLite("IRanges")
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
ov = countOverlaps(r2, r1, type="within")>0
ov
head(ov)
length(ov)
a = ov[[1]]
a
a = ov[[2]]
a
a = ov[[3]]
a
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
ovids
length(r1)
r1[[7]]
r1[[7]][76,]
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
ovids
r1[[7]][1,]
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
starts
ii
ii = r2[[i]][ which(ov[[i]]), ]
starts = ii$start
ends = ii$end
ii[,1]
ii
ii[1]
class()
class(ii)
start(ii)
ends = ends(ii)
ends = end(ii)
ends
starts
ii = r2[[i]][ which(ov[[i]]), ]
starts = start(ii)
ends = end(ii)
# Find the relevant information in the f2 file
ix = which(f2$Start_Position %in% starts & f2$End_Position %in% ends)
ovids[[i]] = f2[ix,1]
ix
ovids
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
dim(ii)
length(ii)
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
ovids
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
ovids
ii
length(ii)
ii = c()
length(ii)
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
ii
ovids
i = 15
ii = r2[[i]][ which(ov[[i]]), ]
ii
length(ii)
if (length(ii)==0){next}
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
ovids
colnames(f1)
source('~/Documents/papillary/oldcode/compareranges_MAFs.R', echo=TRUE)
ovids
lp = 5
lp:1L
p = seq(0.1,0.5,5)
p
p = seq(0,0.5,5)
p
?seq
p = seq(0,0.5,.1)
p
p = seq(0.1,0.6,.1)
i <- lp:1L
i
o <- order(p, decreasing = TRUE)
o
p
lp = 5
lp = 6
i <- lp:1L
i
p
o
o <- order(p, decreasing = TRUE)
o
?rand
o
order(o)
p = c(0.2,0.1,0.05,0.4,0.6,0.7)
p
o <- order(p, decreasing = TRUE)
o
ro <- order(o)
ro
n = 6
pmin(1, cummin(n/i * p[o]))[ro]
?cummin
?pmin
p = c(0.2,0.1,0.07,0.4,0.6,0.7)
pmin(1, cummin(n/i * p[o]))[ro]
p
i <- lp:1L   # lp is the number of p-values
o <- order(p, decreasing = TRUE) # "o" will reverse sort the p-values
ro <- order(o)
pmin(1, cummin(n/i * p[o]))[ro]
p
o
ro
pmin(1, cummin(n/i * p[o]))[ro]
i
o
ro
pmin(1, cummin(n/i * p[o]))[ro]
p
order(p)
p[3] = 0.001
pmin(1, cummin(n/i * p[o]))[ro]
p
pmin(1, cummin(n/i * p[o]))[ro]
.6*6/5
source("https://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
source("https://bioconductor.org/biocLite.R")
biocLite("paxtoolsr")
source("https://bioconductor.org/biocLite.R")
biocLite("paxtoolsr")
library(taxize)
?classification
library(RTCGAToolbox)
RTCGAToolbox:::::getDiffExpressedGenes()
RTCGAToolbox:::getDiffExpressedGenes()
RTCGAToolbox:::getDiffExpressedGenes
shiny::runApp('pancanmet/inst/shinyApp')
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
?aheatmap
aheatmap(inh2,Rowv = F, Colv = F)
inh2 = inh[which(rowSums(inh) > 3),]
act2 = act[which(rowSums(act) > 3),]
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
filename = '../res/pathway_inhibiting.pdf')
inh2 = inh[which(rowSums(inh) > 6),]
act2 = act[which(rowSums(act) > 3),]
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,cexRow = 8,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,cexRow = 30,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 10,cexRow = 1,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 100,cexRow = 1,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 30,cexRow = 1,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 10,cexRow = 1,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 20,cexRow = 1,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 20,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 10,cexRow = 10,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 10,cexRow = 100,
filename = '../res/pathway_inhibiting.pdf')
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 10,cexRow = 100,legend = F,
filename = '../res/pathway_inhibiting.pdf')
install.packages('NMF')
install.packages("NMF")
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
?aheatmap
aheatmap(inh2,Rowv = F, Colv = F,width = 8,height = 8,
fontsize = 10,cexRow = .8,legend = F,
filename = '../res/pathway_inhibiting.pdf')
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
a = aheatmap(act2)
class(a)
a[[1]]
a[[2]]
a[[3]]
a[[4]]
a[[5]]
length(a)
?pheatmap
library(pheatmap)
?pheatmap
inh2 = inh[which(rowSums(inh) > 6),]
act2 = act[which(rowSums(act) > 3),]
inhcluster = aheatmap(inh2)
pheatmap(inh2[inhcluster[[2]],inhcluster[[4]]],cluster_rows = FALSE,cluster_cols = FALSE)
pheatmap(inh2[inhcluster[[2]],inhcluster[[4]]],
cluster_rows = FALSE,cluster_cols = FALSE,
filename = '../res/pathway_inhibiting.pdf')
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
paletteLength <- 50
myColor <- colorRampPalette(c("white", "yellow","red"))(paletteLength)
myBreaks = c(seq(max(d)/paletteLength, max(inh2), length.out=floor(paletteLength)))
myBreaks = c(seq(max(inh2)/paletteLength, max(inh2), length.out=floor(paletteLength)))
paletteLength = 50
myColor = colorRampPalette(c("white", "yellow","red"))(paletteLength)
# Cluster with aheatmap, plot with pheatmap
inh2 = inh[which(rowSums(inh) > 7),]
act2 = act[which(rowSums(act) > 3),]
inhcluster = aheatmap(inh2)
myBreaks = c(seq(max(inh2)/paletteLength, max(inh2), length.out=floor(paletteLength)))
pheatmap(inh2[inhcluster[[2]],inhcluster[[4]]],
breaks = myBreaks,color = myColor,
cluster_rows = FALSE,cluster_cols = FALSE,
filename = '../res/pathway_inhibiting.pdf',height = 8,width = 8)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
head(act)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
head(act)
head(inh)
source('~/Documents/small-molecule-regulation/R/plotpathways.R', echo=TRUE)
